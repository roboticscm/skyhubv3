// Code generated by MockGen. DO NOT EDIT.
// Source: suntech.com.vn/skygroup/store (interfaces: AuthStore)

// Package mockdb is a generated GoMock package.
package mockdb

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
	models "suntech.com.vn/skygroup/models"
)

// MockAuthStore is a mock of AuthStore interface
type MockAuthStore struct {
	ctrl     *gomock.Controller
	recorder *MockAuthStoreMockRecorder
}

// MockAuthStoreMockRecorder is the mock recorder for MockAuthStore
type MockAuthStoreMockRecorder struct {
	mock *MockAuthStore
}

// NewMockAuthStore creates a new mock instance
func NewMockAuthStore(ctrl *gomock.Controller) *MockAuthStore {
	mock := &MockAuthStore{ctrl: ctrl}
	mock.recorder = &MockAuthStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockAuthStore) EXPECT() *MockAuthStoreMockRecorder {
	return m.recorder
}

// ChangePassword mocks base method
func (m *MockAuthStore) ChangePassword(arg0 int64, arg1, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChangePassword", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// ChangePassword indicates an expected call of ChangePassword
func (mr *MockAuthStoreMockRecorder) ChangePassword(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChangePassword", reflect.TypeOf((*MockAuthStore)(nil).ChangePassword), arg0, arg1, arg2)
}

// Login mocks base method
func (m *MockAuthStore) Login(arg0, arg1 string) (*models.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Login", arg0, arg1)
	ret0, _ := ret[0].(*models.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Login indicates an expected call of Login
func (mr *MockAuthStoreMockRecorder) Login(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Login", reflect.TypeOf((*MockAuthStore)(nil).Login), arg0, arg1)
}

// Logout mocks base method
func (m *MockAuthStore) Logout(arg0 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Logout", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Logout indicates an expected call of Logout
func (mr *MockAuthStoreMockRecorder) Logout(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Logout", reflect.TypeOf((*MockAuthStore)(nil).Logout), arg0)
}

// RefreshToken mocks base method
func (m *MockAuthStore) RefreshToken(arg0 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RefreshToken", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RefreshToken indicates an expected call of RefreshToken
func (mr *MockAuthStoreMockRecorder) RefreshToken(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RefreshToken", reflect.TypeOf((*MockAuthStore)(nil).RefreshToken), arg0)
}

// UpdateFreshToken mocks base method
func (m *MockAuthStore) UpdateFreshToken(arg0 int64, arg1 string) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateFreshToken", arg0, arg1)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateFreshToken indicates an expected call of UpdateFreshToken
func (mr *MockAuthStoreMockRecorder) UpdateFreshToken(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateFreshToken", reflect.TypeOf((*MockAuthStore)(nil).UpdateFreshToken), arg0, arg1)
}
