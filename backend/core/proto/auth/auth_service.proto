syntax = "proto3";

package auth;

option go_package = ".;pt";
import "google/api/annotations.proto";
import "google/protobuf/empty.proto";

message LoginRequest {
  string username = 1;
  string password = 2;
}

message LoginResponse {
  string access_token = 1;
  string refresh_token = 2;
  string username = 3;
  int64 user_id = 4;
  string full_name = 5;
}

message RefreshTokenRequest {
  string refresh_token = 1;
}

message RefreshTokenResponse {
  string access_token = 1;
  bool success = 2;
}

message ChangePasswordRequest {
  string current_password = 1;
  string new_password = 2;
}

message GetQrCodeResponse {
  int64 qr_code = 1 [ jstype = JS_STRING ];
}


message UpdateAuthTokenRequest {
  int64 id = 1 [ jstype = JS_STRING];
  string access_token = 2;
  string refresh_token = 3;
  int64 company_id = 4 [ jstype = JS_STRING];
  int64 branch_id = 5 [ jstype = JS_STRING];
  string last_locale_language = 6;
  string username = 7;
  bool authenticated = 8;
}

message UpdateRemoteAuthenticatedResponse {
  bool authenticated = 1;
}

message UpdateRemoteAuthenticatedRequest {
  int64 record_id = 1 [ jstype = JS_STRING];
}

message LockScreenRequest {
  bool is_locked = 1;
}

message UpdateAvatarRequest {
  int64 icon_filesystem_id = 1 [ jstype = JS_STRING];
  string icon_filepath = 2;
  string icon_filename = 3;
}

message GetAuthRequest {
  int64 id = 1 [ jstype = JS_STRING];
}

message GetAuthResponse {
  int64 icon_filesystem_id = 1 [ jstype = JS_STRING];
  string icon_filepath = 2;
  string icon_filename = 3;
}

service AuthService {
  rpc LoginHandler(LoginRequest) returns (LoginResponse) {
    option (google.api.http) = {
      post : "/auth/login"
      body : "*"
    };
  };

  rpc VerifyPasswordHandler(LoginRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      post : "/auth/verify-password"
      body : "*"
    };
  };

  rpc RefreshTokenHandler(RefreshTokenRequest) returns (RefreshTokenResponse) {
    option (google.api.http) = {
      post : "/auth/refresh-token"
      body : "*"
    };
  };

  rpc LogoutHandler(google.protobuf.Empty) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      delete : "/auth/logout"
    };
  };

  rpc ChangePasswordHandler(ChangePasswordRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      put : "/auth/change-pw"
      body : "*"
    };
  };

  rpc GetQrCodeHandler(google.protobuf.Empty) returns (GetQrCodeResponse) {
    option (google.api.http) = {
      get : "/auth/get-qr-code"
    };
  }

  rpc UpdateAuthTokenHandler(UpdateAuthTokenRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      put : "/auth/update-auth-token"
      body: "*"
    };
  }

  rpc UpdateRemoteAuthenticatedHandler(UpdateRemoteAuthenticatedRequest) returns (UpdateRemoteAuthenticatedResponse) {
    option (google.api.http) = {
      put : "/auth/update-authenticated"
      body: "*"
    };
  }

  rpc LockScreenHandler(LockScreenRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      put: "/auth/lock-screen"
      body: "*"
    };
  }

  rpc UpdateAvatarHandler(UpdateAvatarRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      put: "/auth/avatar"
      body: "*"
    };
  }

  rpc GetHandler(GetAuthRequest) returns (GetAuthResponse) {
    option (google.api.http) = {
      get: "/auth"
    };
  }
}